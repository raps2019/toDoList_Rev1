{"version":3,"sources":["webpack://to_do_list/./src/style.css","webpack://to_do_list/./src/index.js","webpack://to_do_list/./src/modules/drawAddNewButtons.js","webpack://to_do_list/./src/modules/drawForms.js","webpack://to_do_list/./src/modules/drawLists.js","webpack://to_do_list/./src/modules/drawTasks.js","webpack://to_do_list/./src/modules/initializePage.js","webpack://to_do_list/./src/modules/listFactory.js","webpack://to_do_list/./src/modules/taskFactory.js","webpack://to_do_list/webpack/bootstrap","webpack://to_do_list/webpack/runtime/define property getters","webpack://to_do_list/webpack/runtime/hasOwnProperty shorthand","webpack://to_do_list/webpack/runtime/make namespace object","webpack://to_do_list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;ACAA;AACgD;AACA;;AAEhD;AAC0D;AAIrB;AAMR;AACmB;AACA;;AAE3B;;AAErB;;AAEA;AACA;;AAEA,mBAAmB,uEAAc;;AAEjC;AACA;;AAEA,+BAA+B,6EAAiB;AAChD,+BAA+B,6EAAiB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mEAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6EAAiB;AACpD;AACA;AACA,uCAAuC,6DAAS;AAChD;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,iBAAiB,6DAAW;AAC5B;AACA,mCAAmC,6DAAS;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA,qBAAqB,6DAAW;AAChC;AACA;AACA,uCAAuC,6DAAS;;AAEhD;AACA;AACA;AACA;AACA;AACA,mCAAmC,6EAAiB;;AAEpD;AACA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;AAChD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,SAAS;AACtB,qBAAqB,sBAAsB;AAC3C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;;AAEhD;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;AAChD;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,SAAS;AACtB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,6DAAS;AAChD;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA,4BAA4B,OAAO;AACnC;AACA;AACA,MAAM,oEAAgB;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;AAChD,mCAAmC,6EAAiB;AACpD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;AAChD;AACA,mCAAmC,6EAAiB;AACpD;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;;AAEhD,mCAAmC,mEAAe;AAClD;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,6DAAW;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;;AAEhD;AACA;;AAEA,mCAAmC,6EAAiB;AACpD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;AAChD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;AAChD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gEAAgE,GAAG;AACnE;AACA;;AAEA;;AAEA,0BAA0B,oEAAgB;AAC1C;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;;AAEhD,mCAAmC,6EAAiB;AACpD;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,6DAAS;;AAEhD;AACA,qCAAqC,6EAAiB;AACtD;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;;;;;AC5bD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEgD;;;;;;;;;;;;;;;;;;AC5BhD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,uBAAuB;AACxC;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA,iCAAiC,cAAc;AAC/C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,uBAAuB;AACxC;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEgF;;AAEhF;AACA;;;;;;;;;;;;;;;ACvPA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEqB;;;;;;;;;;;;;;;ACxCrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEqB;;;;;;;;;;;;;;;ACjGrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAE0B;;;;;;;;;;;;;;;ACxC1B;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;ACpB3B;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;UCzD3B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// Import Factory Functions\nimport taskFactory from \"./modules/taskFactory\";\nimport listFactory from \"./modules/listFactory\";\n\n// Import DOM Manipulation Functions\nimport { initializePage } from \"./modules/initializePage\";\nimport {\n  drawNewListButton,\n  drawNewTaskButton,\n} from \"./modules/drawAddNewButtons\";\nimport {\n  drawNewListForm,\n  drawEditListForm,\n  drawNewTaskForm,\n  drawEditTaskForm,\n} from \"./modules/drawForms\";\nimport { drawLists } from \"./modules/drawLists\";\nimport { drawTasks } from \"./modules/drawTasks\";\n\nimport \"./style.css\";\n\nconsole.log(\"This should work now!hahshadkjdasjka!\");\n\nconst runApp = (() => {\n  const body = document.querySelector(\"body\");\n\n  body.appendChild(initializePage());\n\n  const addListContainer = document.getElementById(\"addListContainer\");\n  const addTaskContainer = document.getElementById(\"addTaskContainer\");\n\n  addListContainer.appendChild(drawNewListButton());\n  addTaskContainer.appendChild(drawNewTaskButton());\n\n  // Activate New List Form when Add New List Button Clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"newListButton\") {\n      const newListButtonContainer = document.getElementById(\n        \"newListButtonContainer\"\n      );\n      newListButtonContainer.remove();\n      addListContainer.appendChild(drawNewListForm());\n      // Remove edit and delete button for tasks while new list input active\n      // Check if edit and delete is active first\n      if (document.getElementById(\"editListButton\")) {\n        document.getElementById(\"editListButton\").remove();\n        document.getElementById(\"deleteListButton\").remove();\n      }\n      // Focus on New List Input\n      document.getElementById(\"newListInput\").focus();\n    }\n  });\n\n  // Deactivate New List form when cancel button Clicked and Add New List Button Back\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"cancelListFormButton\") {\n      const newListFormContainer = document.getElementById(\n        \"newListFormContainer\"\n      );\n      newListFormContainer.remove();\n      addListContainer.appendChild(drawNewListButton());\n      const listRowsContainer = document.getElementById(\"listRowsContainer\");\n      listRowsContainer.remove();\n      listContentContainer.appendChild(drawLists(listArray));\n    }\n  });\n\n  let listArray = [];\n  let taskArray = [];\n\n  // Initialize List Array with Default List\n  listArray.push(listFactory(\"Default\", true));\n  let listContentContainer = document.getElementById(\"listContentContainer\");\n  listContentContainer.appendChild(drawLists(listArray));\n\n  // Add List to Array when Submit List Button Clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"submitListButton\") {\n      const listInput = document.getElementById(\"newListInput\");\n      const listName = listInput.value;\n      if (listName === \"\") {\n        alert(\"Enter a name for the list\");\n        return;\n      }\n      // Check if list exists\n      for (let i = 0; i < listArray.length; i++) {\n        if (listArray[i].name.toLowerCase() === listName.toLowerCase()) {\n          alert(`${listName} already exists`);\n          return;\n        }\n      }\n      for (let i = 0; i < listArray.length; i++) {\n        listArray[i].active = false;\n      }\n      // Push new list to array and clear input text box\n      listArray.push(listFactory(listName, true));\n      listInput.value = \"\";\n      document.getElementById(\"listRowsContainer\").remove();\n      listContentContainer.appendChild(drawLists(listArray));\n\n      // Remove add form and draw add new list button\n      const newListFormContainer = document.getElementById(\n        \"newListFormContainer\"\n      );\n      newListFormContainer.remove();\n      addListContainer.appendChild(drawNewListButton());\n\n      // Draw Tasks for Active List\n      const taskContentContainer = document.getElementById(\n        \"taskContentContainer\"\n      );\n      taskContentContainer.innerHTML = \"\";\n      taskContentContainer.appendChild(drawTasks(taskArray, listArray));\n    }\n  });\n\n  // Submit new list when enter pressed\n  document.addEventListener(\"keyup\", (e) => {\n    if (e.key === \"Enter\") {\n      if (document.getElementById(\"newListInput\")) {\n        document.getElementById(\"submitListButton\").click();\n      }\n    }\n  });\n\n  // Change Active List by Clicking on List Row\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.classList.contains(\"inactive-list\")) {\n      const { listId } = e.target.parentNode.dataset;\n      for (let i = 0; i < listArray.length; i++) {\n        if (listArray[i].id === listId) {\n          listArray[i].active = true;\n        } else {\n          listArray[i].active = false;\n        }\n      }\n      const listRowsContainer = document.getElementById(\"listRowsContainer\");\n      listRowsContainer.remove();\n      listContentContainer.appendChild(drawLists(listArray));\n\n      const taskContentContainer = document.getElementById(\n        \"taskContentContainer\"\n      );\n      taskContentContainer.innerHTML = \"\";\n      taskContentContainer.appendChild(drawTasks(taskArray, listArray));\n    }\n  });\n\n  // Delete List when Delete Button Clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"deleteListButton\") {\n      const { listId } = e.target.parentNode.dataset;\n      listArray = listArray.filter((list) => list.id != listId);\n\n      // Set last list as active\n      if (listArray.length != 0) {\n        listArray[listArray.length - 1].active = true;\n      }\n\n      const listRowsContainer = document.getElementById(\"listRowsContainer\");\n      listRowsContainer.remove();\n      listContentContainer.appendChild(drawLists(listArray));\n    }\n  });\n\n  // Activate Edit List input form when Edit Button Clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"editListButton\") {\n      const { listId } = e.target.parentNode.dataset;\n      const targetListRow = document.querySelector(\n        `[data-list-id = '${listId}']`\n      );\n      targetListRow.innerHTML = \" \";\n      drawEditListForm(listArray, listId, targetListRow);\n      // targetListRow.appendChild(drawEditListForm(listArray,listId).children[0]);\n      // targetListRow.appendChild(drawEditListForm(listArray,listId).children[0]);\n      // targetListRow.appendChild(drawEditListForm(listArray,listId).children[0]);\n\n      // focus on input field\n      document.getElementById(\"editListInput\").focus();\n\n      // remove add new list button while edit list active\n      if (document.getElementById(\"newListButtonContainer\")) {\n        document.getElementById(\"newListButtonContainer\").remove();\n      }\n    }\n  });\n\n  // Edit list name when save list button clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"saveListButton\") {\n      const { listId } = e.target.parentNode.dataset;\n      const newListName = document.getElementById(\"editListInput\").value;\n      if (newListName === \"\") {\n        alert(\"Enter a name of the list\");\n      }\n      // Check if name is already used\n      const otherLists = listArray.filter((list) => list.id != listId);\n      for (let i = 0; i < otherLists.length; i++) {\n        if (otherLists[i].name === newListName) {\n          alert(`${newListName} already exists`);\n          return;\n        }\n      }\n\n      listArray.find((list) => list.id === listId).editName(newListName);\n      console.log(listArray);\n      const listRowsContainer = document.getElementById(\"listRowsContainer\");\n      listRowsContainer.remove();\n      listContentContainer.appendChild(drawLists(listArray));\n      addListContainer.appendChild(drawNewListButton());\n    }\n  });\n\n  // Save input when enter button pressed\n  document.addEventListener(\"keyup\", (e) => {\n    if (e.key === \"Enter\") {\n      if (document.getElementById(\"editListInput\")) {\n        document.getElementById(\"saveListButton\").click();\n      }\n    }\n  });\n\n  // Deactivate Edit List form when cancel button Clicked and Edit New List Button Back\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"cancelEditListFormButton\") {\n      const listRowsContainer = document.getElementById(\"listRowsContainer\");\n      listRowsContainer.remove();\n      listContentContainer.appendChild(drawLists(listArray));\n      // Add Add List Button Back\n      addListContainer.appendChild(drawNewListButton());\n    }\n  });\n\n  // Open add new task form when Add new task clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"newTaskButton\") {\n      addTaskContainer.innerHTML = \"\";\n\n      taskArray.forEach((task) => (task.active = false));\n\n      const taskContentContainer = document.getElementById(\n        \"taskContentContainer\"\n      );\n      taskContentContainer.innerHTML = \"\";\n      taskContentContainer.appendChild(drawTasks(taskArray, listArray));\n\n      addTaskContainer.appendChild(drawNewTaskForm());\n      document.getElementById(\"taskNameInput\").focus();\n    }\n  });\n\n  // Change task color option selector when color selected\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"colorSelector\") {\n      document.getElementById(\"colorSelector\").style.background =\n        e.target.value;\n    }\n  });\n\n  // Save task to task array when submit task button clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"submitTaskButton\") {\n      e.preventDefault();\n      // Set other tasks to inactive\n      taskArray.map((task) => (task.active = false));\n\n      // Arguments for taskFactory Function\n      const name = document.getElementById(\"taskNameInput\").value;\n      let details = document.getElementById(\"taskDetailsInput\").value;\n      let date = document.getElementById(\"taskDateInput\").value;\n      let time = document.getElementById(\"taskTimeInput\").value;\n      const color = document.getElementById(\"colorSelector\").value;\n      const list = listArray.find((list) => list.active === true).name;\n      const active = true;\n\n      if (name === \"\") {\n        alert(\"Enter a task name\");\n        return;\n      }\n\n      if (details === \"\") {\n        details = \"No additional details\";\n      }\n\n      if (date === \"\") {\n        date = \"-\";\n      }\n\n      if (time === \"\") {\n        time = \"-\";\n      }\n\n      if (time != \"-\" && date === \"-\") {\n        alert(\"Enter a due date\");\n        return;\n      }\n\n      // Add task to taskArray\n      taskArray.push(\n        taskFactory(name, details, date, time, color, list, active)\n      );\n\n      // Draw Tasks for Active List\n      const taskContentContainer = document.getElementById(\n        \"taskContentContainer\"\n      );\n      taskContentContainer.innerHTML = \"\";\n      taskContentContainer.appendChild(drawTasks(taskArray, listArray));\n\n      // Remove new task form and draw add new task button\n      addTaskContainer.innerHTML = \"\";\n\n      addTaskContainer.appendChild(drawNewTaskButton());\n    }\n  });\n\n  // Change active task when task row is clicked\n  document.addEventListener(\"click\", (e) => {\n    if (\n      e.target.className === \"task-row\" ||\n      e.target.parentNode.className === \"task-row\"\n    ) {\n      let id;\n      if (e.target.className === \"task-row\") {\n        id = e.target.dataset.taskId;\n      } else {\n        id = e.target.parentNode.dataset.taskId;\n      }\n\n      // Make all tasks inactive, then set clicked task to active\n      taskArray.map((task) => (task.active = false));\n      taskArray.find((task) => task.id === id).active = true;\n\n      const taskContentContainer = document.getElementById(\n        \"taskContentContainer\"\n      );\n      taskContentContainer.innerHTML = \"\";\n      taskContentContainer.appendChild(drawTasks(taskArray, listArray));\n    }\n  });\n\n  // Delete task when delete button is clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"deleteTaskButton\") {\n      const id = e.target.parentNode.dataset.taskId;\n      taskArray = taskArray.filter((task) => task.id !== id);\n\n      const taskContentContainer = document.getElementById(\n        \"taskContentContainer\"\n      );\n      taskContentContainer.innerHTML = \"\";\n      taskContentContainer.appendChild(drawTasks(taskArray, listArray));\n    }\n  });\n\n  // Edit Task When Edit Clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"editTaskButton\") {\n      const activeTasks = taskArray.filter((task) => task.active === true);\n      if (activeTasks.length <= 1) {\n        document.getElementById(\"taskRowHeader\").remove();\n      }\n\n      const id = e.target.parentNode.dataset.taskId;\n      const taskRow = document.querySelector(`[data-task-id ='${id}']`);\n      taskRow.className = \"edit-task-row-container\";\n      taskRow.innerHTML = \"\";\n\n      document.getElementById(\"newTaskButton\").remove();\n\n      taskRow.appendChild(drawEditTaskForm(taskArray, id));\n    }\n  });\n\n  // Remove edit task form when cancel edit task form button clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"cancelEditTaskFormButton\") {\n      const taskContentContainer = document.getElementById(\n        \"taskContentContainer\"\n      );\n      taskContentContainer.innerHTML = \"\";\n      taskContentContainer.appendChild(drawTasks(taskArray, listArray));\n\n      addTaskContainer.appendChild(drawNewTaskButton());\n    }\n  });\n\n  // Submit new task information when save task button clicked\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"saveTaskButton\") {\n      e.preventDefault();\n\n      const id = e.target.parentNode.parentNode.dataset.taskId;\n\n      const name = document.getElementById(\"taskNameInput\").value;\n      let details = document.getElementById(\"taskDetailsInput\").value;\n      let date = document.getElementById(\"taskDateInput\").value;\n      let time = document.getElementById(\"taskTimeInput\").value;\n      const color = document.getElementById(\"colorSelector\").value;\n      // let list = listArray.find(list => list.active === true).name;\n      // let active = true;\n\n      if (name === \"\") {\n        alert(\"Enter a task name\");\n        return;\n      }\n\n      if (details === \"\") {\n        details = \"No additional details\";\n      }\n\n      if (date === \"\") {\n        date = \"-\";\n      }\n\n      if (time === \"\") {\n        time = \"-\";\n      }\n\n      if (time != \"-\" && date === \"-\") {\n        alert(\"Enter a due date\");\n        return;\n      }\n\n      const task = taskArray.find((task) => task.id === id);\n\n      task.editName(name);\n      task.editDetails(details);\n      task.editDate(date);\n      task.editTime(time);\n      task.editColor(color);\n\n      const taskContentContainer = document.getElementById(\n        \"taskContentContainer\"\n      );\n      taskContentContainer.innerHTML = \"\";\n      taskContentContainer.appendChild(drawTasks(taskArray, listArray));\n\n      if (document.getElementById(\"newTaskButton\") === null) {\n        addTaskContainer.appendChild(drawNewTaskButton());\n      }\n    }\n  });\n})();\n","const drawNewListButton = () => {\n  const div = document.createElement(\"div\");\n  div.setAttribute(\"id\", \"newListButtonContainer\");\n\n  const button = document.createElement(\"button\");\n  button.setAttribute(\"id\", \"newListButton\");\n  button.setAttribute(\"class\", \"new-list-button\");\n  button.innerHTML = \"+ Add New List\";\n\n  div.appendChild(button);\n\n  return div;\n};\n\nconst drawNewTaskButton = () => {\n  const div = document.createElement(\"div\");\n  div.setAttribute(\"id\", \"newTaskButtonContainer\");\n\n  const button = document.createElement(\"button\");\n  button.setAttribute(\"id\", \"newTaskButton\");\n  button.setAttribute(\"class\", \"new-task-button\");\n  button.innerHTML = \"+ Add New Task\";\n\n  div.appendChild(button);\n\n  return div;\n};\n\nexport { drawNewListButton, drawNewTaskButton };\n","// Draw Add New List Form\nconst drawNewListForm = () => {\n  const div = document.createElement(\"div\");\n  div.id = \"newListFormContainer\";\n  div.className = \"new-list-form-container\";\n\n  const input = document.createElement(\"input\");\n  input.placeholder = \"Enter List Name\";\n  input.id = \"newListInput\";\n  input.className = \"new-list-input\";\n\n  const submitButton = document.createElement(\"button\");\n  submitButton.id = \"submitListButton\";\n  submitButton.className = \"submit-list-button\";\n  submitButton.innerHTML = \"Add\";\n\n  const cancelButton = document.createElement(\"button\");\n  cancelButton.id = \"cancelListFormButton\";\n  cancelButton.className = \"cancel-list-form-button\";\n  cancelButton.innerHTML = \"Cancel\";\n\n  div.appendChild(input);\n  div.appendChild(submitButton);\n  div.appendChild(cancelButton);\n\n  return div;\n};\n\n// Draw Edit List Form\nconst drawEditListForm = (listArray, id, target) => {\n  const input = document.createElement(\"input\");\n  const listName = listArray.find((list) => list.id === id).name;\n  input.value = listName;\n  input.id = \"editListInput\";\n  input.className = \"edit-list-input\";\n\n  const submitButton = document.createElement(\"button\");\n  submitButton.id = \"saveListButton\";\n  submitButton.className = \"save-list-button\";\n  submitButton.innerHTML = \"Save\";\n\n  const cancelButton = document.createElement(\"button\");\n  cancelButton.id = \"cancelEditListFormButton\";\n  cancelButton.className = \"cancel-edit-list-form-button\";\n  cancelButton.innerHTML = \"Cancel\";\n\n  target.appendChild(input);\n  target.appendChild(submitButton);\n  target.appendChild(cancelButton);\n};\n\nconst drawNewTaskForm = () => {\n  const form = document.createElement(\"form\");\n  form.id = \"newTaskFormContainer\";\n  form.className = \"new-task-form-container\";\n\n  const nameInput = document.createElement(\"input\");\n  nameInput.type = \"text\";\n  nameInput.id = \"taskNameInput\";\n  nameInput.className = \"task-name-input\";\n  nameInput.placeholder = \"Task Name\";\n\n  // let dateInputLabel = document.createElement('label');\n  // dateInputLabel.innerHTML = 'Set date'\n\n  const dateInput = document.createElement(\"input\");\n  dateInput.type = \"text\";\n  dateInput.placeholder = \"Date\";\n  dateInput.setAttribute(\"onfocus\", \"(this.type='date')\");\n  dateInput.id = \"taskDateInput\";\n  dateInput.className = \"task-date-input\";\n\n  // let timeInputLabel = document.createElement('label');\n  // timeInputLabel = \"Set time\"\n\n  const timeInput = document.createElement(\"input\");\n  timeInput.type = \"text\";\n  timeInput.placeholder = \"Time\";\n  timeInput.setAttribute(\"onfocus\", \"(this.type='time')\");\n  timeInput.id = \"taskTimeInput\";\n  timeInput.className = \"task-time-input\";\n\n  const selectColorLabel = document.createElement(\"label\");\n  selectColorLabel.innerHTML = \"Select Color:\";\n  selectColorLabel.className = \"select-color-label\";\n  selectColorLabel.id = \"selectColorLabel\";\n\n  const colorSelector = document.createElement(\"select\");\n  colorSelector.id = \"colorSelector\";\n  colorSelector.className = \"color-selector\";\n\n  const colorArray = [\n    \"#FFFFFF\",\n    \"#FF9AA2\",\n    \"#FFB7B2\",\n    \"#FFDAC1\",\n    \"#E2F0CB\",\n    \"#B5EAD7\",\n    \"#C7CEEA\",\n  ];\n\n  for (let i = 0; i < colorArray.length; i += 1) {\n    const option = document.createElement(\"option\");\n    option.value = colorArray[i];\n    option.id = `color-option-${colorArray[i]}`;\n    option.className = \"color-option\";\n    option.style.background = `${colorArray[i]}`;\n    colorSelector.appendChild(option);\n  }\n\n  const detailsInput = document.createElement(\"textarea\");\n  detailsInput.placeholder = \"Details\";\n  detailsInput.id = \"taskDetailsInput\";\n  detailsInput.className = \"task-details-input\";\n\n  const submitButton = document.createElement(\"button\");\n  submitButton.id = \"submitTaskButton\";\n  submitButton.className = \"submit-task-button\";\n  submitButton.innerHTML = \"Add\";\n\n  const cancelButton = document.createElement(\"button\");\n  cancelButton.id = \"cancelTaskFormButton\";\n  cancelButton.className = \"cancel-task-form-button\";\n  cancelButton.innerHTML = \"Cancel\";\n\n  form.appendChild(nameInput);\n  form.appendChild(dateInput);\n  form.appendChild(timeInput);\n  form.appendChild(selectColorLabel);\n  form.appendChild(colorSelector);\n  form.appendChild(detailsInput);\n  form.appendChild(submitButton);\n  form.appendChild(cancelButton);\n\n  return form;\n};\n\nconst drawEditTaskForm = (taskArray, id) => {\n  const task = taskArray.find((task) => task.id === id);\n\n  const form = document.createElement(\"form\");\n  form.id = \"editTaskFormContainer\";\n  form.className = \"edit-task-form-container\";\n\n  const nameInput = document.createElement(\"input\");\n  nameInput.type = \"text\";\n  nameInput.id = \"taskNameInput\";\n  nameInput.className = \"task-name-input\";\n  nameInput.value = task.name;\n  nameInput.style.background = task.color;\n\n  // let dateInputLabel = document.createElement('label');\n  // dateInputLabel.innerHTML = 'Set date'\n\n  const dateInput = document.createElement(\"input\");\n  if (task.date === \"-\") {\n    dateInput.type = \"text\";\n    dateInput.placeholder = \"Date\";\n    dateInput.setAttribute(\"onfocus\", \"(this.type='date')\");\n  } else {\n    dateInput.type = \"date\";\n    dateInput.value = task.date;\n  }\n  dateInput.id = \"taskDateInput\";\n  dateInput.className = \"task-date-input\";\n  dateInput.style.background = task.color;\n\n  // let timeInputLabel = document.createElement('label');\n  // timeInputLabel = \"Set time\"\n\n  const timeInput = document.createElement(\"input\");\n  if (task.time === \"-\") {\n    timeInput.type = \"text\";\n    timeInput.placeholder = \"Time\";\n    timeInput.setAttribute(\"onfocus\", \"(this.type='time')\");\n  } else {\n    timeInput.type = \"time\";\n    timeInput.value = task.time;\n  }\n  timeInput.id = \"taskTimeInput\";\n  timeInput.className = \"task-time-input\";\n  timeInput.style.background = task.color;\n\n  const selectColorLabel = document.createElement(\"label\");\n  selectColorLabel.innerHTML = \"Select Color:\";\n  selectColorLabel.className = \"select-color-label\";\n  selectColorLabel.id = \"selectColorLabel\";\n\n  const colorSelector = document.createElement(\"select\");\n  colorSelector.id = \"colorSelector\";\n  colorSelector.className = \"color-selector\";\n  colorSelector.style.background = task.color;\n\n  const colorArray = [\n    \"#FFFFFF\",\n    \"#FF9AA2\",\n    \"#FFB7B2\",\n    \"#FFDAC1\",\n    \"#E2F0CB\",\n    \"#B5EAD7\",\n    \"#C7CEEA\",\n  ];\n\n  for (let i = 0; i < colorArray.length; i += 1) {\n    const option = document.createElement(\"option\");\n    option.value = colorArray[i];\n    option.id = `color-option-${colorArray[i]}`;\n    option.className = \"color-option\";\n    option.style.background = `${colorArray[i]}`;\n    if (colorArray[i] === task.color) {\n      option.selected = true;\n    }\n    colorSelector.appendChild(option);\n  }\n\n  const detailsInput = document.createElement(\"textarea\");\n  detailsInput.placeholder = \"Details\";\n  detailsInput.id = \"taskDetailsInput\";\n  detailsInput.className = \"task-details-input\";\n  detailsInput.value = task.details;\n  detailsInput.style.background = task.color;\n\n  const saveButton = document.createElement(\"button\");\n  saveButton.id = \"saveTaskButton\";\n  saveButton.className = \"save-task-button\";\n  saveButton.innerHTML = \"Save\";\n\n  const cancelButton = document.createElement(\"button\");\n  cancelButton.id = \"cancelEditTaskFormButton\";\n  cancelButton.className = \"cancel-task-form-button\";\n  cancelButton.innerHTML = \"Cancel\";\n\n  form.appendChild(nameInput);\n  form.appendChild(dateInput);\n  form.appendChild(timeInput);\n  form.appendChild(selectColorLabel);\n  form.appendChild(colorSelector);\n  form.appendChild(detailsInput);\n  form.appendChild(saveButton);\n  form.appendChild(cancelButton);\n\n  return form;\n};\n\nexport { drawNewListForm, drawEditListForm, drawNewTaskForm, drawEditTaskForm };\n\n// Draw Add New Task or Edit Task Form\n// TODO\n","const drawLists = (listArray) => {\n  const div = document.createElement(\"div\");\n  div.id = \"listRowsContainer\";\n\n  for (let i = 0; i < listArray.length; i += 1) {\n    const listRow = document.createElement(\"div\");\n    listRow.dataset.listId = listArray[i].id;\n    listRow.className = \"list-row\";\n\n    const listNameP = document.createElement(\"p\");\n    listNameP.innerHTML = listArray[i].name;\n    listNameP.className = \"list-name\";\n    listNameP.classList.add(\"inactive-list\");\n\n    if (listArray[i].active === true) {\n      listNameP.classList.remove(\"inactive-list\");\n      listNameP.classList.add(\"active-list\");\n    }\n\n    listRow.appendChild(listNameP);\n\n    if (listArray[i].active === true) {\n      const editListButton = document.createElement(\"button\");\n      editListButton.className = \"edit-list-button\";\n      editListButton.id = \"editListButton\";\n      editListButton.innerHTML = \"Edit\";\n      listRow.append(editListButton);\n\n      const deleteListButton = document.createElement(\"button\");\n      deleteListButton.className = \"delete-list-button\";\n      deleteListButton.id = \"deleteListButton\";\n      deleteListButton.innerHTML = \"Delete\";\n      listRow.append(deleteListButton);\n    }\n    div.appendChild(listRow);\n  }\n\n  return div;\n};\n\nexport { drawLists };\n","const drawTasks = (taskArray, listArray) => {\n  const div = document.createElement(\"div\");\n  div.id = \"taskRowsContainer\";\n  div.className = \"task-rows-container\";\n\n  // Draw Task Headers\n  const taskRowHeader = document.createElement(\"div\");\n  taskRowHeader.id = \"taskRowHeader\";\n  taskRowHeader.className = \"task-row-header\";\n\n  const checkBoxHeader = document.createElement(\"h3\");\n  checkBoxHeader.innerHTML = \"Done\";\n  checkBoxHeader.className = \"completed-check-box-header\";\n\n  const nameHeader = document.createElement(\"h3\");\n  nameHeader.innerHTML = \"Task\";\n  nameHeader.className = \"task-name-header\";\n\n  const dateHeader = document.createElement(\"h3\");\n  dateHeader.innerHTML = \"Due Date\";\n  dateHeader.className = \"task-date-header\";\n\n  const timeHeader = document.createElement(\"h3\");\n  timeHeader.innerHTML = \"Time\";\n  timeHeader.className = \"task-time-header\";\n\n  taskRowHeader.appendChild(checkBoxHeader);\n  taskRowHeader.appendChild(nameHeader);\n  taskRowHeader.appendChild(dateHeader);\n  taskRowHeader.appendChild(timeHeader);\n\n  div.appendChild(taskRowHeader);\n\n  const activeListName = listArray.find((list) => list.active === true).name;\n\n  // Filter the task Array to only include active list tasks\n\n  const activeListTaskArray = taskArray.filter(\n    (task) => task.list === activeListName\n  );\n\n  for (let i = 0; i < activeListTaskArray.length; i++) {\n    const taskRow = document.createElement(\"div\");\n    taskRow.dataset.taskId = activeListTaskArray[i].id;\n    taskRow.className = \"task-row\";\n    taskRow.style.background = activeListTaskArray[i].color;\n\n    const completedCheckBox = document.createElement(\"input\");\n    completedCheckBox.type = \"checkbox\";\n    completedCheckBox.className = \"completed-check-box\";\n    completedCheckBox.id = \"completedCheckBox\";\n\n    const nameP = document.createElement(\"p\");\n    nameP.innerHTML = activeListTaskArray[i].name;\n    nameP.className = \"task-name\";\n\n    const dateP = document.createElement(\"p\");\n    dateP.innerHTML = activeListTaskArray[i].date;\n    dateP.className = \"task-date\";\n\n    const timeP = document.createElement(\"p\");\n    timeP.innerHTML = activeListTaskArray[i].time;\n    timeP.className = \"task-time\";\n\n    taskRow.appendChild(completedCheckBox);\n    taskRow.appendChild(nameP);\n    taskRow.appendChild(dateP);\n    taskRow.appendChild(timeP);\n\n    if (activeListTaskArray[i].active === true) {\n      taskRow.className = \"task-row-active\";\n\n      const detailsP = document.createElement(\"p\");\n      detailsP.innerHTML = activeListTaskArray[i].details;\n      detailsP.className = \"task-details\";\n\n      const editButton = document.createElement(\"button\");\n      editButton.className = \"edit-task-button\";\n      editButton.id = \"editTaskButton\";\n      editButton.innerHTML = \"Edit\";\n\n      const deleteButton = document.createElement(\"button\");\n      deleteButton.className = \"delete-task-button\";\n      deleteButton.id = \"deleteTaskButton\";\n      deleteButton.innerHTML = \"Delete\";\n\n      taskRow.appendChild(detailsP);\n      taskRow.appendChild(editButton);\n      taskRow.appendChild(deleteButton);\n    }\n\n    div.appendChild(taskRow);\n  }\n\n  return div;\n};\n\nexport { drawTasks };\n","const initializePage = () => {\n  const contentContainer = document.createElement(\"div\");\n  contentContainer.id = \"contentContainer\";\n  contentContainer.className = \"content-container\";\n\n  const listContainer = document.createElement(\"div\");\n  listContainer.id = \"listContainer\";\n  listContainer.className = \"list-container\";\n\n  const listHeader = document.createElement(\"div\");\n  listHeader.innerHTML = \"Lists\";\n\n  const addListContainer = document.createElement(\"div\");\n  addListContainer.id = \"addListContainer\";\n\n  const listContentContainer = document.createElement(\"div\");\n  listContentContainer.id = \"listContentContainer\";\n\n  listContainer.appendChild(listContentContainer);\n  listContainer.appendChild(addListContainer);\n\n  const taskContainer = document.createElement(\"div\");\n  taskContainer.id = \"taskContainer\";\n  taskContainer.className = \"task-container\";\n\n  const addTaskContainer = document.createElement(\"div\");\n  addTaskContainer.id = \"addTaskContainer\";\n\n  const taskContentContainer = document.createElement(\"div\");\n  taskContentContainer.id = \"taskContentContainer\";\n\n  taskContainer.appendChild(taskContentContainer);\n  taskContainer.appendChild(addTaskContainer);\n\n  contentContainer.appendChild(listContainer);\n  contentContainer.appendChild(taskContainer);\n\n  return contentContainer;\n};\n\nexport { initializePage };\n","// list Object\n\n// list Object Prototype\nconst listProto = {\n  editName(newName) {\n    this.name = newName;\n  },\n};\n\n// list Object Factory Function\nconst listFactory = (name, active) => {\n  const list = Object.create(listProto);\n\n  list.name = name;\n  list.id = Date.now().toString();\n  list.active = active;\n\n  return list;\n};\n\nexport default listFactory;\n","// Task Object\n\n// Task Object Prototype Functions\nconst taskProto = {\n  editName(newName) {\n    this.name = newName;\n  },\n  editDetails(newDetails) {\n    this.details = newDetails;\n  },\n  editDate(newDate) {\n    this.date = newDate;\n  },\n  editTime(newTime) {\n    this.time = newTime;\n  },\n  editColor(newColor) {\n    this.color = newColor;\n  },\n  editList(newList) {\n    this.list = newList;\n  },\n  editColor(newColor) {\n    this.color = newColor;\n  },\n  toggleStatus() {\n    if (this.completed === false) {\n      this.completed = true;\n    } else {\n      this.completed = false;\n    }\n  },\n};\n\n// Task Factory Function\nconst taskFactory = (name, details, date, time, color, list, active) => {\n  const task = Object.create(taskProto);\n  const completed = false;\n\n  task.name = name;\n  task.details = details;\n  task.date = date;\n  task.time = time;\n  task.color = color;\n  task.list = list;\n  task.active = active;\n  task.completed = completed;\n  task.id = Date.now().toString();\n\n  return task;\n};\n\n// Add Task Function (dont think this is need)\n// const addTask = (taskList,name,details,date,color,list) => {\n//     taskList.push(taskFactory(name,details,date,color,list));\n// }\n\nexport default taskFactory;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}