{"version":3,"sources":["webpack://to_do_list/./src/style.css?e320","webpack://to_do_list/./src/index.js","webpack://to_do_list/./src/modules/drawAddNewButtons.js","webpack://to_do_list/./src/modules/drawForms.js","webpack://to_do_list/./src/modules/drawLists.js","webpack://to_do_list/./src/modules/drawTasks.js","webpack://to_do_list/./src/modules/initializePage.js","webpack://to_do_list/./src/modules/listFactory.js","webpack://to_do_list/./src/modules/taskFactory.js","webpack://to_do_list/webpack/bootstrap","webpack://to_do_list/webpack/runtime/define property getters","webpack://to_do_list/webpack/runtime/hasOwnProperty shorthand","webpack://to_do_list/webpack/runtime/make namespace object","webpack://to_do_list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;ACAA;AAC+C;AACA;;AAE/C;AACyD;AAC0B;AACwB;AAC5D;AACA;;AAE3B;;;AAGpB;;AAEA;;AAEA;;AAEA,qBAAqB,uEAAc;;AAEnC;AACA;;AAEA,iCAAiC,6EAAiB;AAClD,iCAAiC,6EAAiB;;AAElD;AACA;AACA;AACA;AACA;AACA,yCAAyC,mEAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,yCAAyC,6EAAiB;AAC1D;AACA;AACA,6CAA6C,6DAAS;AACtD;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,mBAAmB,6DAAW;AAC9B;AACA,qCAAqC,6DAAS;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA,6BAA6B,SAAS;AACtC;AACA,iB;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA,2BAA2B,6DAAW;AACtC;AACA;AACA,6CAA6C,6DAAS;;AAEtD;AACA;AACA;AACA,yCAAyC,6EAAiB;;AAE1D;AACA;AACA;AACA,6CAA6C,6DAAS;AACtD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,6CAA6C,6DAAS;;AAEtD;AACA;AACA,6CAA6C,6DAAS;AACtD,S;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,6DAAS;AACtD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,2EAA2E,OAAO;AAClF;AACA,YAAY,oEAAgB;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C,6DAAS;AACtD,yCAAyC,6EAAiB;AAC1D;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,6DAAS;AAClD;AACA,qCAAqC,6EAAiB;AACtD;AACA,KAAK;;;;AAIL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,6CAA6C,6DAAS;;AAEtD,yCAAyC,mEAAe;AACxD;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,6DAAW;AACtC;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,6DAAS;;AAEtD;AACA;AACA;;AAEA,yCAAyC,6EAAiB;AAC1D;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,6DAAS;AACtD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,6DAAS;AACtD;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,GAAG;AACvE;AACA;;AAEA;;AAEA,gCAAgC,oEAAgB;AAChD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,6CAA6C,6DAAS;;AAEtD,yCAAyC,6EAAiB;AAC1D;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,6DAAS;;AAEtD;AACA,6CAA6C,6EAAiB;AAC9D;AACA;AACA,KAAK;;;;;;;;AAQL,CAAC,I;;;;;;;;;;;;;;;AC9aD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAKC;;;;;;;;;;;;;;;;;;AC/BD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA,oCAAoC,cAAc;AAClD;AACA,qCAAqC,cAAc;AACnD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,K;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA,oCAAoC,cAAc;AAClD;AACA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAOC;;AAED;AACA,M;;;;;;;;;;;;;;AC9OA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,mBAAmB,gCAAgC;;AAEnD;AACA,2D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAIC;;;;;;;;;;;;;;;ACrGD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACvCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;ACpB3B;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA,0B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,C;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;UC1D3B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","//Import Factory Functions\r\nimport taskFactory from './modules/taskFactory'\r\nimport listFactory from './modules/listFactory'\r\n\r\n//Import DOM Manipulation Functions\r\nimport { initializePage } from './modules/initializePage'\r\nimport { drawNewListButton, drawNewTaskButton } from './modules/drawAddNewButtons';\r\nimport { drawNewListForm, drawEditListForm, drawNewTaskForm, drawEditTaskForm } from './modules/drawForms';\r\nimport { drawLists } from './modules/drawLists'\r\nimport { drawTasks } from './modules/drawTasks'\r\n\r\nimport \"./style.css\"\r\n\r\n\r\nconsole.log('This should work now!!!')\r\n\r\nconst runApp = (() => {\r\n\r\n    let body = document.querySelector('body');\r\n\r\n    body.appendChild(initializePage());\r\n\r\n    let addListContainer = document.getElementById('addListContainer');\r\n    let addTaskContainer = document.getElementById('addTaskContainer');\r\n\r\n    addListContainer.appendChild(drawNewListButton());\r\n    addTaskContainer.appendChild(drawNewTaskButton());\r\n\r\n    //Activate New List Form when Add New List Button Clicked\r\n    document.addEventListener('click',function(e){\r\n        if(e.target.id === 'newListButton') {\r\n            let newListButtonContainer = document.getElementById('newListButtonContainer')\r\n            newListButtonContainer.remove();\r\n            addListContainer.appendChild(drawNewListForm());\r\n            //Remove edit and delete button for tasks while new list input active\r\n            //Check if edit and delete is active first\r\n            if (document.getElementById('editListButton')) {\r\n                document.getElementById('editListButton').remove();\r\n                document.getElementById('deleteListButton').remove();\r\n            }\r\n            // Focus on New List Input \r\n            document.getElementById('newListInput').focus();\r\n        }          \r\n    })\r\n\r\n    //Deactivate New List form when cancel button Clicked and Add New List Button Back\r\n    document.addEventListener('click', function(e) {\r\n        if(e.target.id === 'cancelListFormButton') {\r\n            let newListFormContainer = document.getElementById('newListFormContainer')\r\n            newListFormContainer.remove();\r\n            addListContainer.appendChild(drawNewListButton());\r\n            let listRowsContainer = document.getElementById('listRowsContainer');\r\n            listRowsContainer.remove();\r\n            listContentContainer.appendChild(drawLists(listArray));\r\n        }\r\n    })\r\n\r\n    let listArray = [];\r\n    let taskArray = [];\r\n\r\n    //Initialize List Array with Default List\r\n    listArray.push(listFactory('Default',true));\r\n    let listContentContainer = document.getElementById('listContentContainer');\r\n    listContentContainer.appendChild(drawLists(listArray))\r\n\r\n    //Add List to Array when Submit List Button Clicked\r\n    document.addEventListener('click',function(e) {\r\n        if(e.target.id === \"submitListButton\") {\r\n            let listInput = document.getElementById('newListInput')\r\n            let listName = listInput.value;\r\n            if (listName === '') {\r\n                alert('Enter a name for the list');\r\n                return;\r\n            }\r\n            //Check if list exists\r\n            for(let i = 0; i < listArray.length; i++) {\r\n                if (listArray[i].name.toLowerCase() === listName.toLowerCase()) {\r\n                    alert(`${listName} already exists`);\r\n                    return;\r\n                } \r\n            }\r\n            for(let i = 0; i < listArray.length; i++) {\r\n                listArray[i].active = false;\r\n            }\r\n            //Push new list to array and clear input text box\r\n            listArray.push(listFactory(listName,true));\r\n            listInput.value = '';\r\n            document.getElementById('listRowsContainer').remove();\r\n            listContentContainer.appendChild(drawLists(listArray));\r\n\r\n            //Remove add form and draw add new list button\r\n            let newListFormContainer = document.getElementById('newListFormContainer')\r\n            newListFormContainer.remove();\r\n            addListContainer.appendChild(drawNewListButton());\r\n\r\n            //Draw Tasks for Active List\r\n            let taskContentContainer = document.getElementById('taskContentContainer');\r\n            taskContentContainer.innerHTML = '';\r\n            taskContentContainer.appendChild(drawTasks(taskArray,listArray));\r\n        }\r\n    })\r\n\r\n    //Submit new list when enter pressed\r\n    document.addEventListener('keyup', function(e) {\r\n        if(e.key != 'Enter') {\r\n            return;\r\n        } else {\r\n            if(document.getElementById('newListInput')) {\r\n                document.getElementById('submitListButton').click();\r\n            }\r\n        }\r\n    })\r\n\r\n    //Change Active List by Clicking on List Row\r\n    document.addEventListener('click',function(e) {\r\n        if(e.target.classList.contains('inactive-list')) {\r\n            let listId = e.target.parentNode.dataset.listId;\r\n            for (let i = 0; i < listArray.length; i++) {\r\n                if (listArray[i].id === listId) {\r\n                    listArray[i].active = true;\r\n                } else {\r\n                    listArray[i].active = false;\r\n                }\r\n            }\r\n            let listRowsContainer = document.getElementById('listRowsContainer');\r\n            listRowsContainer.remove();\r\n            listContentContainer.appendChild(drawLists(listArray));\r\n\r\n            let taskContentContainer = document.getElementById('taskContentContainer');\r\n            taskContentContainer.innerHTML = '';\r\n            taskContentContainer.appendChild(drawTasks(taskArray,listArray));\r\n        } \r\n    })\r\n\r\n    //Delete List when Delete Button Clicked\r\n    document.addEventListener('click',function(e) {\r\n        if (e.target.id === 'deleteListButton') {\r\n            let listId = e.target.parentNode.dataset.listId;\r\n            listArray = listArray.filter(list => list.id != listId);\r\n\r\n            //Set last list as active\r\n            if (listArray.length != 0) {\r\n                listArray[listArray.length -1].active = true;\r\n            }\r\n\r\n            let listRowsContainer = document.getElementById('listRowsContainer');\r\n            listRowsContainer.remove();\r\n            listContentContainer.appendChild(drawLists(listArray));\r\n        }\r\n    })\r\n\r\n    //Activate Edit List input form when Edit Button Clicked\r\n    document.addEventListener('click',function(e) {\r\n        if (e.target.id === 'editListButton') {\r\n            let listId = e.target.parentNode.dataset.listId;\r\n            let targetListRow = document.querySelector(`[data-list-id = '${listId}']`);\r\n            targetListRow.innerHTML = ' ';\r\n            drawEditListForm(listArray,listId,targetListRow);\r\n            // targetListRow.appendChild(drawEditListForm(listArray,listId).children[0]);\r\n            // targetListRow.appendChild(drawEditListForm(listArray,listId).children[0]);\r\n            // targetListRow.appendChild(drawEditListForm(listArray,listId).children[0]);\r\n            \r\n            // focus on input field\r\n            document.getElementById('editListInput').focus();\r\n\r\n            // remove add new list button while edit list active\r\n            if (document.getElementById('newListButtonContainer')) {\r\n                document.getElementById('newListButtonContainer').remove();\r\n            }\r\n        }\r\n    })\r\n\r\n    //Edit list name when save list button clicked\r\n    document.addEventListener('click',function(e) {\r\n        if (e.target.id === 'saveListButton') {\r\n            let listId = e.target.parentNode.dataset.listId;\r\n            console.log(listId);\r\n            let newListName = document.getElementById('editListInput').value;\r\n            if (newListName === '') {\r\n                alert('Enter a name of the list');\r\n            }\r\n            //Check if name is already used\r\n            let otherLists = listArray.filter(list => list.id != listId);\r\n            for (let i = 0; i < otherLists.length; i++) {\r\n                if (otherLists[i].name === newListName) {\r\n                    alert(`${newListName} already exists`);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            listArray.find(list => list.id === listId).editName(newListName)\r\n            console.log(listArray);\r\n            let listRowsContainer = document.getElementById('listRowsContainer')\r\n            listRowsContainer.remove();\r\n            listContentContainer.appendChild(drawLists(listArray));\r\n            addListContainer.appendChild(drawNewListButton());\r\n            return;\r\n        }\r\n    });\r\n\r\n    //Save input when enter button pressed\r\n    document.addEventListener('keyup', function(e) {\r\n        if(e.key != 'Enter') {\r\n            return;\r\n        } else {\r\n            if(document.getElementById('editListInput')) {\r\n                document.getElementById('saveListButton').click();\r\n            }\r\n        }\r\n    })\r\n\r\n    //Deactivate Edit List form when cancel button Clicked and Edit New List Button Back\r\n    document.addEventListener('click', function(e) {\r\n    if(e.target.id === 'cancelEditListFormButton') {\r\n        \r\n        let listRowsContainer = document.getElementById('listRowsContainer')\r\n        listRowsContainer.remove();\r\n        listContentContainer.appendChild(drawLists(listArray));\r\n        //Add Add List Button Back\r\n        addListContainer.appendChild(drawNewListButton());\r\n        }\r\n    })\r\n\r\n\r\n\r\n    //Open add new task form when Add new task clicked\r\n    document.addEventListener('click',function(e) {\r\n        if (e.target.id === 'newTaskButton') {\r\n            addTaskContainer.innerHTML = '';\r\n\r\n            taskArray.map(task => task.active = false);\r\n\r\n            let taskContentContainer = document.getElementById('taskContentContainer');\r\n            taskContentContainer.innerHTML = '';\r\n            taskContentContainer.appendChild(drawTasks(taskArray,listArray));\r\n\r\n            addTaskContainer.appendChild(drawNewTaskForm());\r\n            document.getElementById('taskNameInput').focus();\r\n        }\r\n    })\r\n\r\n    //Change task color option selector when color selected \r\n    document.addEventListener('click', function(e) {\r\n        if (e.target.id === 'colorSelector') {\r\n            document.getElementById('colorSelector').style.background = e.target.value;\r\n        }\r\n    })\r\n\r\n    //Save task to task array when submit task button clicked\r\n    document.addEventListener('click',function(e) {\r\n        if (e.target.id === ('submitTaskButton')) {\r\n            e.preventDefault();\r\n            //Set other tasks to inactive\r\n            taskArray.map(task => task.active = false);\r\n\r\n            //Arguments for taskFactory Function\r\n            let name = document.getElementById('taskNameInput').value;\r\n            let details = document.getElementById('taskDetailsInput').value;\r\n            let date = document.getElementById('taskDateInput').value;\r\n            let time = document.getElementById('taskTimeInput').value;\r\n            let color = document.getElementById('colorSelector').value\r\n            let list = listArray.find(list => list.active === true).name;\r\n            let active = true;\r\n\r\n            if (name === '') {\r\n                alert('Enter a task name');\r\n                return;\r\n            }\r\n\r\n            if (details === '') {\r\n                details = 'No additional details'\r\n            }\r\n\r\n            if (date === '') {\r\n                date = '-';\r\n            }\r\n\r\n            if (time === '') {\r\n                time = '-';\r\n            }\r\n\r\n            if (time != '-' && date === '-') {\r\n                alert('Enter a due date');\r\n                return;\r\n            }\r\n\r\n            //Add task to taskArray\r\n            taskArray.push(taskFactory(name,details,date,time,color,list,active));\r\n            console.log(taskArray);\r\n            console.log(listArray)\r\n\r\n            //Draw Tasks for Active List\r\n            let taskContentContainer = document.getElementById('taskContentContainer');\r\n            taskContentContainer.innerHTML = '';\r\n            taskContentContainer.appendChild(drawTasks(taskArray,listArray));\r\n\r\n            //Remove new task form and draw add new task button\r\n            let addTaskContainer = document.getElementById('addTaskContainer');\r\n            addTaskContainer.innerHTML = '';\r\n\r\n            addTaskContainer.appendChild(drawNewTaskButton());\r\n        }\r\n    })\r\n    \r\n    //Change active task when task row is clicked\r\n    document.addEventListener('click' , function(e) {\r\n        if (e.target.className === 'task-row' || e.target.parentNode.className === 'task-row') {\r\n            let id;\r\n            if (e.target.className === 'task-row') {\r\n                id = e.target.dataset.taskId;\r\n            } else {\r\n                id = e.target.parentNode.dataset.taskId;\r\n            }\r\n\r\n            //Make all tasks inactive, then set clicked task to active\r\n            taskArray.map(task => task.active = false);\r\n            taskArray.find(task => task.id === id).active = true;\r\n\r\n            let taskContentContainer = document.getElementById('taskContentContainer');\r\n            taskContentContainer.innerHTML = '';\r\n            taskContentContainer.appendChild(drawTasks(taskArray,listArray));\r\n        }\r\n    })\r\n\r\n    //Delete task when delete button is clicked\r\n    document.addEventListener('click', function(e) {\r\n        if (e.target.id === 'deleteTaskButton') {\r\n            let id = e.target.parentNode.dataset.taskId;\r\n            taskArray = taskArray.filter(task => task.id != id);\r\n\r\n            let taskContentContainer = document.getElementById('taskContentContainer');\r\n            taskContentContainer.innerHTML = '';\r\n            taskContentContainer.appendChild(drawTasks(taskArray,listArray));\r\n        }\r\n    })\r\n\r\n    //Edit Task When Edit Clicked\r\n    document.addEventListener('click', function(e) {\r\n        if (e.target.id === 'editTaskButton') {\r\n\r\n            let activeTasks = taskArray.filter(task => task.active === true);\r\n            if (activeTasks.length <= 1) {\r\n                document.getElementById('taskRowHeader').remove();\r\n            }\r\n\r\n            let id = e.target.parentNode.dataset.taskId;\r\n            let taskRow = document.querySelector(`[data-task-id ='${id}']`);\r\n            taskRow.className = 'edit-task-row-container';\r\n            taskRow.innerHTML = '';\r\n\r\n            document.getElementById('newTaskButton').remove();\r\n\r\n            taskRow.appendChild(drawEditTaskForm(taskArray,id));\r\n        }\r\n    });\r\n\r\n    //Remove edit task form when cancel edit task form button clicked\r\n    document.addEventListener('click', function(e) {\r\n        if (e.target.id === 'cancelEditTaskFormButton') {\r\n            let taskContentContainer = document.getElementById('taskContentContainer');\r\n            taskContentContainer.innerHTML = '';\r\n            taskContentContainer.appendChild(drawTasks(taskArray,listArray));\r\n\r\n            addTaskContainer.appendChild(drawNewTaskButton());\r\n        }\r\n    })\r\n\r\n    //Submit new task information when save task button clicked \r\n    document.addEventListener('click', function(e) {\r\n        if (e.target.id === 'saveTaskButton') {\r\n\r\n            e.preventDefault();\r\n\r\n            let id = e.target.parentNode.parentNode.dataset.taskId;\r\n            console.log(id)\r\n\r\n            let name = document.getElementById('taskNameInput').value;\r\n            let details = document.getElementById('taskDetailsInput').value;\r\n            let date = document.getElementById('taskDateInput').value;\r\n            let time = document.getElementById('taskTimeInput').value;\r\n            let color = document.getElementById('colorSelector').value\r\n            // let list = listArray.find(list => list.active === true).name;\r\n            // let active = true;\r\n\r\n            if (name === '') {\r\n                alert('Enter a task name');\r\n                return;\r\n            }\r\n\r\n            if (details === '') {\r\n                details = 'No additional details'\r\n            }\r\n\r\n            if (date === '') {\r\n                date = '-';\r\n            }\r\n\r\n            if (time === '') {\r\n                time = '-';\r\n            }\r\n\r\n            if (time != '-' && date === '-') {\r\n                alert('Enter a due date');\r\n                return;\r\n            }\r\n\r\n            let task = taskArray.find(task => task.id === id);\r\n\r\n            task.editName(name);\r\n            task.editDetails(details);\r\n            task.editDate(date);\r\n            task.editTime(time);\r\n            task.editColor(color);\r\n\r\n            let taskContentContainer = document.getElementById('taskContentContainer');\r\n            taskContentContainer.innerHTML = '';\r\n            taskContentContainer.appendChild(drawTasks(taskArray,listArray));\r\n\r\n            if (document.getElementById('newTaskButton') === null) {\r\n                addTaskContainer.appendChild(drawNewTaskButton());\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n})();","const drawNewListButton = () => {\r\n    let div = document.createElement('div');\r\n    div.setAttribute('id','newListButtonContainer');\r\n\r\n    let button = document.createElement('button');\r\n    button.setAttribute('id','newListButton');\r\n    button.setAttribute('class','new-list-button');\r\n    button.innerHTML = '+ Add New List'\r\n\r\n    div.appendChild(button);\r\n\r\n    return div;\r\n}\r\n\r\nconst drawNewTaskButton = () => {\r\n    let div = document.createElement('div');\r\n    div.setAttribute('id','newTaskButtonContainer');\r\n\r\n    let button = document.createElement('button');\r\n    button.setAttribute('id','newTaskButton');\r\n    button.setAttribute('class','new-task-button');\r\n    button.innerHTML = '+ Add New Task'\r\n\r\n    div.appendChild(button);\r\n\r\n    return div;\r\n}\r\n\r\nexport {\r\n    drawNewListButton,\r\n    drawNewTaskButton,\r\n}\r\n","//Draw Add New List Form\r\nconst drawNewListForm = () => {\r\n    let div = document.createElement('div');\r\n    div.id = \"newListFormContainer\"\r\n    div.className = \"new-list-form-container\"\r\n\r\n    let input = document.createElement('input');\r\n    input.placeholder = 'Enter List Name';\r\n    input.id = 'newListInput';\r\n    input.className = 'new-list-input'\r\n\r\n    let submitButton = document.createElement('button');\r\n    submitButton.id = 'submitListButton';\r\n    submitButton.className = 'submit-list-button';\r\n    submitButton.innerHTML = 'Add';\r\n\r\n    let cancelButton = document.createElement('button');\r\n    cancelButton.id = 'cancelListFormButton';\r\n    cancelButton.className = 'cancel-list-form-button';\r\n    cancelButton.innerHTML = 'Cancel';\r\n    \r\n    div.appendChild(input);\r\n    div.appendChild(submitButton);\r\n    div.appendChild(cancelButton);\r\n\r\n    return div;\r\n}\r\n\r\n//Draw Edit List Form\r\nconst drawEditListForm = (listArray,id,target) => {\r\n\r\n    let input = document.createElement('input');\r\n    let listName = listArray.find(list => list.id === id).name;\r\n    input.value = listName;\r\n    input.id = 'editListInput';\r\n    input.className = 'edit-list-input'\r\n\r\n    let submitButton = document.createElement('button');\r\n    submitButton.id = 'saveListButton';\r\n    submitButton.className = 'save-list-button';\r\n    submitButton.innerHTML = 'Save';\r\n\r\n    let cancelButton = document.createElement('button');\r\n    cancelButton.id = 'cancelEditListFormButton';\r\n    cancelButton.className = 'cancel-edit-list-form-button';\r\n    cancelButton.innerHTML = 'Cancel';\r\n    \r\n    target.appendChild(input);\r\n    target.appendChild(submitButton);\r\n    target.appendChild(cancelButton);\r\n}\r\n\r\nconst drawNewTaskForm = () => {\r\n    let form = document.createElement('form');\r\n    form.id = \"newTaskFormContainer\";\r\n    form.className = \"new-task-form-container\"\r\n\r\n    let nameInput = document.createElement('input');\r\n    nameInput.type = 'text';\r\n    nameInput.id = 'taskNameInput'\r\n    nameInput.className = 'task-name-input'\r\n    nameInput.placeholder = 'Task Name'\r\n\r\n    // let dateInputLabel = document.createElement('label');\r\n    // dateInputLabel.innerHTML = 'Set date'\r\n\r\n    let dateInput = document.createElement('input');\r\n    dateInput.type = 'text';\r\n    dateInput.placeholder = 'Date';\r\n    dateInput.setAttribute('onfocus',`(this.type='date')`)\r\n    dateInput.id = 'taskDateInput';\r\n    dateInput.className = 'task-date-input';\r\n\r\n    // let timeInputLabel = document.createElement('label');\r\n    // timeInputLabel = \"Set time\"\r\n\r\n    let timeInput = document.createElement('input');\r\n    timeInput.type = 'text';\r\n    timeInput.placeholder = 'Time';\r\n    timeInput.setAttribute('onfocus',`(this.type='time')`)\r\n    timeInput.id = 'taskTimeInput';\r\n    timeInput.className = 'task-time-input';\r\n\r\n    let selectColorLabel = document.createElement('label');\r\n    selectColorLabel.innerHTML = 'Select Color:';\r\n    selectColorLabel.className = 'select-color-label';\r\n    selectColorLabel.id = 'selectColorLabel'\r\n\r\n    let colorSelector = document.createElement('select');\r\n    colorSelector.id = 'colorSelector';\r\n    colorSelector.className = 'color-selector'\r\n\r\n    let colorArray = ['#FFFFFF','#FF9AA2','#FFB7B2','#FFDAC1','#E2F0CB','#B5EAD7', '#C7CEEA']\r\n\r\n    for (let i = 0; i < colorArray.length; i++) {\r\n        let option = document.createElement('option');\r\n        option.value = colorArray[i];\r\n        option.id = `color-option-${colorArray[i]}`\r\n        option.className = 'color-option'\r\n        option.style.background = `${colorArray[i]}`;\r\n        colorSelector.appendChild(option);\r\n    }\r\n\r\n    let detailsInput = document.createElement('textarea');\r\n    detailsInput.placeholder = \"Details\";\r\n    detailsInput.id = 'taskDetailsInput';\r\n    detailsInput.className = 'task-details-input';\r\n\r\n    let submitButton = document.createElement('button');\r\n    submitButton.id = 'submitTaskButton';\r\n    submitButton.className = 'submit-task-button';\r\n    submitButton.innerHTML = 'Add';\r\n\r\n    let cancelButton = document.createElement('button');\r\n    cancelButton.id = 'cancelTaskFormButton';\r\n    cancelButton.className = 'cancel-task-form-button';\r\n    cancelButton.innerHTML = 'Cancel';\r\n\r\n    form.appendChild(nameInput);\r\n    form.appendChild(dateInput);\r\n    form.appendChild(timeInput);\r\n    form.appendChild(selectColorLabel);\r\n    form.appendChild(colorSelector);\r\n    form.appendChild(detailsInput);\r\n    form.appendChild(submitButton);\r\n    form.appendChild(cancelButton);\r\n\r\n    return form;\r\n}\r\n\r\nconst drawEditTaskForm = (taskArray , id) => {\r\n    let task = taskArray.find(task => task.id === id)\r\n\r\n    let form = document.createElement('form');\r\n    form.id = \"editTaskFormContainer\";\r\n    form.className = \"edit-task-form-container\"\r\n\r\n    let nameInput = document.createElement('input');\r\n    nameInput.type = 'text';\r\n    nameInput.id = 'taskNameInput'\r\n    nameInput.className = 'task-name-input'\r\n    nameInput.value = task.name;\r\n    nameInput.style.background = task.color;\r\n\r\n    // let dateInputLabel = document.createElement('label');\r\n    // dateInputLabel.innerHTML = 'Set date'\r\n\r\n    let dateInput = document.createElement('input');\r\n    if (task.date === '-') {\r\n        dateInput.type = 'text';\r\n        dateInput.placeholder = 'Date';\r\n        dateInput.setAttribute('onfocus',`(this.type='date')`)\r\n    } else {\r\n        dateInput.type = 'date';\r\n        dateInput.value = task.date;\r\n    }   \r\n    dateInput.id = 'taskDateInput';\r\n    dateInput.className = 'task-date-input';\r\n    dateInput.style.background = task.color;\r\n\r\n    // let timeInputLabel = document.createElement('label');\r\n    // timeInputLabel = \"Set time\"\r\n\r\n    let timeInput = document.createElement('input');\r\n    if (task.time === '-') {\r\n        timeInput.type = 'text';\r\n        timeInput.placeholder = 'Time';\r\n        timeInput.setAttribute('onfocus',`(this.type='time')`)\r\n    } else {\r\n        timeInput.type = 'time';\r\n        timeInput.value = task.time;\r\n    }\r\n    timeInput.id = 'taskTimeInput';\r\n    timeInput.className = 'task-time-input';\r\n    timeInput.style.background = task.color;\r\n\r\n    let selectColorLabel = document.createElement('label');\r\n    selectColorLabel.innerHTML = 'Select Color:';\r\n    selectColorLabel.className = 'select-color-label';\r\n    selectColorLabel.id = 'selectColorLabel'\r\n    \r\n\r\n    let colorSelector = document.createElement('select');\r\n    colorSelector.id = 'colorSelector';\r\n    colorSelector.className = 'color-selector'\r\n    colorSelector.style.background = task.color;\r\n\r\n    let colorArray = ['#FFFFFF','#FF9AA2','#FFB7B2','#FFDAC1','#E2F0CB','#B5EAD7', '#C7CEEA']\r\n\r\n    for (let i = 0; i < colorArray.length; i++) {\r\n        let option = document.createElement('option');\r\n        option.value = colorArray[i];\r\n        option.id = `color-option-${colorArray[i]}`\r\n        option.className = 'color-option'\r\n        option.style.background = `${colorArray[i]}`;\r\n        if (colorArray[i] === task.color) {\r\n            option.selected = true;\r\n        }\r\n        colorSelector.appendChild(option);\r\n    }\r\n\r\n    let detailsInput = document.createElement('textarea');\r\n    detailsInput.placeholder = \"Details\";\r\n    detailsInput.id = 'taskDetailsInput';\r\n    detailsInput.className = 'task-details-input';\r\n    detailsInput.value = task.details;\r\n    detailsInput.style.background = task.color;\r\n\r\n    let saveButton = document.createElement('button');\r\n    saveButton.id = 'saveTaskButton';\r\n    saveButton.className = 'save-task-button';\r\n    saveButton.innerHTML = 'Save';\r\n\r\n    let cancelButton = document.createElement('button');\r\n    cancelButton.id = 'cancelEditTaskFormButton';\r\n    cancelButton.className = 'cancel-task-form-button';\r\n    cancelButton.innerHTML = 'Cancel';\r\n\r\n    form.appendChild(nameInput);\r\n    form.appendChild(dateInput);\r\n    form.appendChild(timeInput);\r\n    form.appendChild(selectColorLabel);\r\n    form.appendChild(colorSelector);\r\n    form.appendChild(detailsInput);\r\n    form.appendChild(saveButton);\r\n    form.appendChild(cancelButton);\r\n\r\n    return form;\r\n}\r\n\r\nexport {\r\n    drawNewListForm,\r\n    drawEditListForm,\r\n    drawNewTaskForm,\r\n    drawEditTaskForm,\r\n}\r\n\r\n//Draw Add New Task or Edit Task Form\r\n//TODO","const drawLists = (listArray) => {\r\n    let div = document.createElement('div');\r\n    div.id = \"listRowsContainer\"\r\n\r\n    for (let i = 0; i < listArray.length; i++) {\r\n        let listRow = document.createElement('div');\r\n        listRow.dataset.listId = listArray[i].id;\r\n        listRow.className = 'list-row'\r\n\r\n        let listNameP = document.createElement('p');\r\n        listNameP.innerHTML = listArray[i].name;\r\n        listNameP.className = 'list-name'\r\n        listNameP.classList.add('inactive-list')\r\n\r\n        if (listArray[i].active === true) {\r\n            listNameP.classList.remove('inactive-list');\r\n            listNameP.classList.add('active-list');\r\n        }\r\n        \r\n        listRow.appendChild(listNameP);\r\n\r\n        if (listArray[i].active === true){\r\n            let editListButton = document.createElement('button');\r\n            editListButton.className = 'edit-list-button';\r\n            editListButton.id = 'editListButton'\r\n            editListButton.innerHTML = 'Edit'\r\n            listRow.append(editListButton);\r\n\r\n            let deleteListButton = document.createElement('button');\r\n            deleteListButton.className = 'delete-list-button';\r\n            deleteListButton.id = 'deleteListButton'\r\n            deleteListButton.innerHTML = 'Delete'\r\n            listRow.append(deleteListButton);\r\n        }\r\n        div.appendChild(listRow);\r\n    }\r\n    \r\n    return div;\r\n}\r\n\r\nexport {\r\n    drawLists\r\n} ","const drawTasks = (taskArray,listArray) => {\r\n    let div = document.createElement('div');\r\n    div.id = \"taskRowsContainer\";\r\n    div.className = 'task-rows-container';\r\n\r\n    //Draw Task Headers\r\n    let taskRowHeader = document.createElement('div');\r\n    taskRowHeader.id = 'taskRowHeader';\r\n    taskRowHeader.className = 'task-row-header';\r\n\r\n    let checkBoxHeader = document.createElement('h3');\r\n    checkBoxHeader.innerHTML = 'Done';\r\n    checkBoxHeader.className = 'completed-check-box-header'\r\n\r\n    let nameHeader = document.createElement('h3');\r\n    nameHeader.innerHTML = 'Task';\r\n    nameHeader.className = 'task-name-header'\r\n\r\n    let dateHeader = document.createElement('h3');\r\n    dateHeader.innerHTML = 'Due Date';\r\n    dateHeader.className = 'task-date-header'\r\n\r\n    let timeHeader = document.createElement('h3');\r\n    timeHeader.innerHTML = 'Time';\r\n    timeHeader.className = 'task-time-header'\r\n\r\n    taskRowHeader.appendChild(checkBoxHeader);\r\n    taskRowHeader.appendChild(nameHeader);\r\n    taskRowHeader.appendChild(dateHeader);\r\n    taskRowHeader.appendChild(timeHeader);\r\n\r\n    div.appendChild(taskRowHeader);\r\n\r\n    let activeListName = listArray.find(list => list.active === true).name;\r\n    console.log(activeListName)\r\n\r\n    //Filter the task Array to only include active list tasks\r\n\r\n    let activeListTaskArray = taskArray.filter(task => task.list === activeListName);\r\n\r\n\r\n    for (let i = 0; i < activeListTaskArray.length; i++) {\r\n\r\n        let taskRow = document.createElement('div');\r\n        taskRow.dataset.taskId = activeListTaskArray[i].id; \r\n        taskRow.className = 'task-row';\r\n        taskRow.style.background = activeListTaskArray[i].color;\r\n\r\n        let completedCheckBox = document.createElement('input');\r\n        completedCheckBox.type = 'checkbox';\r\n        completedCheckBox.className = 'completed-check-box';\r\n        completedCheckBox.id = 'completedCheckBox'\r\n\r\n        let nameP = document.createElement('p');\r\n        nameP.innerHTML = activeListTaskArray[i].name;\r\n        nameP.className = 'task-name'\r\n\r\n        let dateP = document.createElement('p');\r\n        dateP.innerHTML = activeListTaskArray[i].date;\r\n        dateP.className = 'task-date';\r\n\r\n        let timeP = document.createElement('p');\r\n        timeP.innerHTML = activeListTaskArray[i].time;\r\n        timeP.className = 'task-time'\r\n\r\n        taskRow.appendChild(completedCheckBox);\r\n        taskRow.appendChild(nameP);\r\n        taskRow.appendChild(dateP);\r\n        taskRow.appendChild(timeP);\r\n\r\n        if (activeListTaskArray[i].active === true) {\r\n            taskRow.className = 'task-row-active'\r\n\r\n            let detailsP = document.createElement('p');\r\n            detailsP.innerHTML = activeListTaskArray[i].details;\r\n            detailsP.className = 'task-details'\r\n\r\n\r\n            let editButton= document.createElement('button');\r\n            editButton.className = 'edit-task-button';\r\n            editButton.id = 'editTaskButton';\r\n            editButton.innerHTML = 'Edit'\r\n\r\n            let deleteButton = document.createElement('button');\r\n            deleteButton.className = 'delete-task-button';\r\n            deleteButton.id = 'deleteTaskButton';\r\n            deleteButton.innerHTML = 'Delete'\r\n\r\n            taskRow.appendChild(detailsP)\r\n            taskRow.appendChild(editButton);\r\n            taskRow.appendChild(deleteButton);\r\n        }\r\n        \r\n        div.appendChild(taskRow);\r\n    }\r\n\r\n    return div;\r\n}\r\n\r\nexport {\r\n    drawTasks\r\n}\r\n","const initializePage = () => {\r\n    let contentContainer = document.createElement('div');\r\n    contentContainer.id = 'contentContainer';\r\n    contentContainer.className = 'content-container';\r\n\r\n    let listContainer = document.createElement('div');\r\n    listContainer.id = 'listContainer';\r\n    listContainer.className = 'list-container';\r\n\r\n    let listHeader = document.createElement('div');\r\n    listHeader.innerHTML = 'Lists'\r\n\r\n    let addListContainer = document.createElement('div');\r\n    addListContainer.id = 'addListContainer';\r\n    \r\n    let listContentContainer = document.createElement('div');\r\n    listContentContainer.id = 'listContentContainer'\r\n\r\n    \r\n    listContainer.appendChild(listContentContainer);\r\n    listContainer.appendChild(addListContainer);\r\n\r\n    let taskContainer = document.createElement('div');\r\n    taskContainer.id = 'taskContainer';\r\n    taskContainer.className = 'task-container';\r\n\r\n    let addTaskContainer = document.createElement('div');\r\n    addTaskContainer.id = 'addTaskContainer'\r\n\r\n    let taskContentContainer = document.createElement('div');\r\n    taskContentContainer.id = 'taskContentContainer';\r\n    \r\n    taskContainer.appendChild(taskContentContainer);\r\n    taskContainer.appendChild(addTaskContainer);\r\n\r\n    contentContainer.appendChild(listContainer);\r\n    contentContainer.appendChild(taskContainer);\r\n\r\n    return contentContainer;\r\n}\r\n\r\nexport { \r\n    initializePage,\r\n}","//list Object \r\n\r\n//list Object Prototype\r\nconst listProto = {\r\n    editName(newName) {\r\n        this.name = newName;\r\n    }\r\n}\r\n\r\n//list Object Factory Function\r\nconst listFactory = (name,active) => {\r\n    let list = Object.create(listProto);\r\n\r\n    list.name = name;\r\n    list.id = Date.now().toString();\r\n    list.active = active;\r\n\r\n    return list;\r\n}\r\n\r\nexport default listFactory;\r\n\r\n","//Task Object\r\n\r\n//Task Object Prototype Functions\r\nconst taskProto = {\r\n    editName(newName) {\r\n        this.name = newName;\r\n    },\r\n    editDetails(newDetails) {\r\n        this.details = newDetails;\r\n    },\r\n    editDate(newDate) {\r\n        this.date = newDate;\r\n    },\r\n    editTime(newTime) {\r\n        this.time = newTime;\r\n    },\r\n    editColor(newColor) {\r\n        this.color = newColor;\r\n    },\r\n    editList(newList) {\r\n        this.list = newList;\r\n    },\r\n    editColor(newColor) {\r\n        this.color = newColor\r\n    },\r\n    toggleStatus() {\r\n        if (this.completed === false) {\r\n            this.completed = true;\r\n        } else {\r\n            this.completed = false\r\n        }\r\n    },\r\n}\r\n\r\n//Task Factory Function\r\nconst taskFactory = (name,details,date,time,color,list,active) => {\r\n\r\n    let task = Object.create(taskProto);\r\n    let completed = false;  \r\n\r\n    task.name = name;\r\n    task.details = details;\r\n    task.date = date;\r\n    task.time = time;\r\n    task.color = color;\r\n    task.list = list;\r\n    task.active = active;\r\n    task.completed = completed;\r\n    task.id = Date.now().toString();\r\n    \r\n    return task;\r\n} \r\n\r\n//Add Task Function (dont think this is need)\r\n// const addTask = (taskList,name,details,date,color,list) => {\r\n//     taskList.push(taskFactory(name,details,date,color,list));\r\n// }\r\n\r\nexport default taskFactory;\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}