{"version":3,"sources":["webpack://to_do_list/./src/index.js","webpack://to_do_list/./src/modules/drawAddNewButtons.js","webpack://to_do_list/./src/modules/drawForms.js","webpack://to_do_list/./src/modules/drawLists.js","webpack://to_do_list/./src/modules/initializePage.js","webpack://to_do_list/./src/modules/listFactory.js","webpack://to_do_list/./src/modules/taskFactory.js","webpack://to_do_list/webpack/bootstrap","webpack://to_do_list/webpack/runtime/define property getters","webpack://to_do_list/webpack/runtime/hasOwnProperty shorthand","webpack://to_do_list/webpack/runtime/make namespace object","webpack://to_do_list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAC+C;AACA;;AAE/C;AACyD;AAC0B;AACX;AACzB;;AAE/C;;AAEA;;AAEA;;AAEA,qBAAqB,uEAAc;;AAEnC;AACA;;;AAGA,iCAAiC,6EAAiB;AAClD,iCAAiC,6EAAiB;;;AAGlD;AACA;AACA;AACA;AACA;AACA,yCAAyC,mEAAe;AACxD,S;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,yCAAyC,6EAAiB;AAC1D;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,mBAAmB,6DAAW;AAC9B,qCAAqC,6DAAS;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA,6BAA6B,SAAS;AACtC;AACA,iB;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA,2BAA2B,6DAAW;AACtC;AACA;AACA,6CAA6C,6DAAS;AACtD;AACA;AACA,yCAAyC,6EAAiB;AAC1D;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6DAAS;AAClD,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6DAAS;AACtD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,2EAA2E,OAAO;AAClF;AACA;AACA,aAAa,oEAAgB;AAC7B;AACA;AACA,KAAK;;;;;;;;;;;;;;;;;AAiBL,CAAC,I;;;;;;;;;;;;;;;ACvID;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAKC;;;;;;;;;;;;;;;;AC/BD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAKC;;AAED;AACA,M;;;;;;;;;;;;;;AC7DA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACvCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;ACpB3B;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA,0B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,C;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;UCnD3B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["//Import Factory Functions\r\nimport taskFactory from './modules/taskFactory'\r\nimport listFactory from './modules/listFactory'\r\n\r\n//Import DOM Manipulation Functions\r\nimport { initializePage } from './modules/initializePage'\r\nimport { drawNewListButton, drawNewTaskButton } from './modules/drawAddNewButtons';\r\nimport { drawNewListForm, drawEditListForm } from './modules/drawForms';\r\nimport { drawLists } from './modules/drawLists'\r\n\r\nconsole.log('This should work!')\r\n\r\nconst runApp = (() => {\r\n\r\n    let body = document.querySelector('body');\r\n\r\n    body.appendChild(initializePage());\r\n\r\n    let addListContainer = document.getElementById('addListContainer');\r\n    let addTaskContainer = document.getElementById('addTaskContainer');\r\n    \r\n\r\n    addListContainer.appendChild(drawNewListButton());\r\n    addTaskContainer.appendChild(drawNewTaskButton());\r\n\r\n\r\n    //Activate New List Form when Add New List Button Clicked\r\n    document.addEventListener('click',function(e){\r\n        if(e.target.id === 'newListButton') {\r\n            let newListButtonContainer = document.getElementById('newListButtonContainer')\r\n            newListButtonContainer.remove();\r\n            addListContainer.appendChild(drawNewListForm());\r\n        }          \r\n    })\r\n\r\n    //Deactivate New List form when cancel button Clicked and Add New List Button Back\r\n    document.addEventListener('click', function(e) {\r\n        if(e.target.id === 'cancelListFormButton') {\r\n            let newListFormContainer = document.getElementById('newListFormContainer')\r\n            newListFormContainer.remove();\r\n            addListContainer.appendChild(drawNewListButton());\r\n        }\r\n    })\r\n\r\n    let listArray = [];\r\n    let taskArray = [];\r\n\r\n    //Initialize List Array with Default List\r\n    listArray.push(listFactory('Default',true));\r\n    listContentContainer.appendChild(drawLists(listArray))\r\n\r\n    //Add List to Array when Submit List Button Clicked\r\n    document.addEventListener('click',function(e) {\r\n        if(e.target.id === \"submitListButton\") {\r\n            let listInput = document.getElementById('newListInput')\r\n            let listName = listInput.value;\r\n            if (listName === '') {\r\n                alert('Enter a name for the list');\r\n                return;\r\n            }\r\n            //Check if list exists\r\n            for(let i = 0; i < listArray.length; i++) {\r\n                if (listArray[i].name.toLowerCase() === listName.toLowerCase()) {\r\n                    alert(`${listName} already exists`);\r\n                    return;\r\n                } \r\n            }\r\n            for(let i = 0; i < listArray.length; i++) {\r\n                listArray[i].active = false;\r\n            }\r\n            //Push new list to array and clear input text box\r\n            listArray.push(listFactory(listName,true));\r\n            listInput.value = '';\r\n            document.getElementById('listRowsContainer').remove();\r\n            listContentContainer.appendChild(drawLists(listArray));\r\n            let newListFormContainer = document.getElementById('newListFormContainer')\r\n            newListFormContainer.remove();\r\n            addListContainer.appendChild(drawNewListButton());\r\n        }\r\n    })\r\n\r\n    //Change Active List by Clicking on List Row\r\n    document.addEventListener('click',function(e) {\r\n        if(e.target.classList.contains('inactive-list')) {\r\n            let listId = e.target.parentNode.dataset.listId;\r\n            for (let i = 0; i < listArray.length; i++) {\r\n                if (listArray[i].id === listId) {\r\n                    listArray[i].active = true;\r\n                } else {\r\n                    listArray[i].active = false;\r\n                }\r\n            }\r\n        }\r\n        let listRowsContainer = document.getElementById('listRowsContainer');\r\n        listRowsContainer.remove();\r\n        listContentContainer.appendChild(drawLists(listArray));\r\n    })\r\n\r\n    //Delete List when Delete Button Clicked\r\n    document.addEventListener('click',function(e) {\r\n        if (e.target.id === 'deleteListButton') {\r\n            let listId = e.target.parentNode.dataset.listId;\r\n            listArray = listArray.filter(list => list.id != listId);\r\n            listRowsContainer.remove();\r\n            listContentContainer.appendChild(drawLists(listArray));\r\n        }\r\n    })\r\n\r\n    //Edit List when Edit Button Clicked\r\n    document.addEventListener('click',function(e) {\r\n        if (e.target.id === 'editListButton') {\r\n            let listId = e.target.parentNode.dataset.listId;\r\n            let targetListRow = document.querySelector(`[data-list-id = '${listId}']`);\r\n            console.log(targetListRow);\r\n            targetListRow.innerHTML = ' ';\r\n            (drawEditListForm(listArray,listId,targetListRow))\r\n            // addListContainer.appendChild(drawEditListForm(listArray,listId));\r\n        }\r\n    })\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n})();","const drawNewListButton = () => {\r\n    let div = document.createElement('div');\r\n    div.setAttribute('id','newListButtonContainer');\r\n\r\n    let button = document.createElement('button');\r\n    button.setAttribute('id','newListButton');\r\n    button.setAttribute('class','new-list-button');\r\n    button.innerHTML = '+ Add New List'\r\n\r\n    div.appendChild(button);\r\n\r\n    return div;\r\n}\r\n\r\nconst drawNewTaskButton = () => {\r\n    let div = document.createElement('div');\r\n    div.setAttribute('id','newTaskButtonContainer');\r\n\r\n    let button = document.createElement('button');\r\n    button.setAttribute('id','newTaskButton');\r\n    button.setAttribute('class','new-task-button');\r\n    button.innerHTML = '+ Add New Task'\r\n\r\n    div.appendChild(button);\r\n\r\n    return div;\r\n}\r\n\r\nexport {\r\n    drawNewListButton,\r\n    drawNewTaskButton,\r\n}\r\n","//Draw Add New List Form\r\nconst drawNewListForm = () => {\r\n    let div = document.createElement('div');\r\n    div.id = \"newListFormContainer\"\r\n    div.className = \"new-list-form-container\"\r\n\r\n    let input = document.createElement('input');\r\n    input.placeholder = 'Enter List Name';\r\n    input.id = 'newListInput';\r\n    input.className = 'new-list-input'\r\n\r\n    let submitButton = document.createElement('button');\r\n    submitButton.id = 'submitListButton';\r\n    submitButton.className = 'submit-list-button';\r\n    submitButton.innerHTML = 'Add';\r\n\r\n    let cancelButton = document.createElement('button');\r\n    cancelButton.id = 'cancelListFormButton';\r\n    cancelButton.className = 'cancel-list-form-button';\r\n    cancelButton.innerHTML = 'Cancel';\r\n    \r\n    div.appendChild(input);\r\n    div.appendChild(submitButton);\r\n    div.appendChild(cancelButton);\r\n\r\n    return div;\r\n}\r\n\r\n//Draw Edit List Form\r\nconst drawEditListForm = (listArray,id,targetDiv) => {\r\n    let div = document.createElement('div');\r\n    div.id = \"editListFormContainer\"\r\n    div.className = \"edit-list-form-container\"\r\n\r\n    let input = document.createElement('input');\r\n    let listName = listArray.find(list => list.id === id).name;\r\n    input.placeholder = listName;\r\n    input.id = 'editListInput';\r\n    input.className = 'edit-list-input'\r\n\r\n    let submitButton = document.createElement('button');\r\n    submitButton.id = 'saveListButton';\r\n    submitButton.className = 'save-list-button';\r\n    submitButton.innerHTML = 'Save';\r\n\r\n    let cancelButton = document.createElement('button');\r\n    cancelButton.id = 'cancelEditListFormButton';\r\n    cancelButton.className = 'cancel-edit-list-form-button';\r\n    cancelButton.innerHTML = 'Cancel';\r\n    \r\n    targetDiv.appendChild(input);\r\n    targetDiv.appendChild(submitButton);\r\n    targetDiv.appendChild(cancelButton);\r\n}\r\n\r\nexport {\r\n    drawNewListForm,\r\n    drawEditListForm,\r\n}\r\n\r\n//Draw Add New Task or Edit Task Form\r\n//TODO","const drawLists = (listArray) => {\r\n    let div = document.createElement('div');\r\n    div.id = \"listRowsContainer\"\r\n\r\n    for (let i = 0; i < listArray.length; i++) {\r\n        let listRow = document.createElement('div');\r\n        listRow.dataset.listId = listArray[i].id;\r\n        listRow.className = 'list-row'\r\n\r\n        let listNameP = document.createElement('p');\r\n        listNameP.innerHTML = listArray[i].name;\r\n        listNameP.className = 'list-name'\r\n        listNameP.classList.add('inactive-list')\r\n\r\n        if (listArray[i].active === true) {\r\n            listNameP.classList.remove('inactive-list');\r\n            listNameP.classList.add('active-list');\r\n        }\r\n        \r\n        listRow.appendChild(listNameP);\r\n\r\n        if (listArray[i].active === true){\r\n            let editListButton = document.createElement('button');\r\n            editListButton.className = 'edit-list-button';\r\n            editListButton.id = 'editListButton'\r\n            editListButton.innerHTML = 'Edit'\r\n            listRow.append(editListButton);\r\n\r\n            let deleteListButton = document.createElement('button');\r\n            deleteListButton.className = 'delete-list-button';\r\n            deleteListButton.id = 'deleteListButton'\r\n            deleteListButton.innerHTML = 'Delete'\r\n            listRow.append(deleteListButton);\r\n        }\r\n        div.appendChild(listRow);\r\n    }\r\n    \r\n    return div;\r\n}\r\n\r\nexport {\r\n    drawLists\r\n} ","const initializePage = () => {\r\n    let contentContainer = document.createElement('div');\r\n    contentContainer.id = 'contentContainer';\r\n    contentContainer.className = 'content-container';\r\n\r\n    let listContainer = document.createElement('div');\r\n    listContainer.id = 'listContainer';\r\n    listContainer.className = 'list-container';\r\n\r\n    let listHeader = document.createElement('div');\r\n    listHeader.innerHTML = 'Lists'\r\n\r\n    let addListContainer = document.createElement('div');\r\n    addListContainer.id = 'addListContainer';\r\n    \r\n    let listContentContainer = document.createElement('div');\r\n    listContentContainer.id = 'listContentContainer'\r\n\r\n    \r\n    listContainer.appendChild(listContentContainer);\r\n    listContainer.appendChild(addListContainer);\r\n\r\n    let taskContainer = document.createElement('div');\r\n    taskContainer.id = 'taskContainer';\r\n    taskContainer.className = 'task-container';\r\n\r\n    let addTaskContainer = document.createElement('div');\r\n    addTaskContainer.id = 'addTaskContainer'\r\n\r\n    let taskContentContainer = document.createElement('div');\r\n    taskContentContainer.id = 'taskContentContainer';\r\n\r\n    taskContainer.appendChild(addTaskContainer);\r\n    taskContainer.appendChild(taskContentContainer);\r\n\r\n    contentContainer.appendChild(listContainer);\r\n    contentContainer.appendChild(taskContainer);\r\n\r\n    return contentContainer;\r\n}\r\n\r\nexport { \r\n    initializePage,\r\n}","//list Object \r\n\r\n//list Object Prototype\r\nconst listProto = {\r\n    editName(newName) {\r\n        this.name = newName;\r\n    }\r\n}\r\n\r\n//list Object Factory Function\r\nconst listFactory = (name,active) => {\r\n    let list = Object.create(listProto);\r\n\r\n    list.name = name;\r\n    list.id = Date.now().toString();\r\n    list.active = active;\r\n\r\n    return list;\r\n}\r\n\r\nexport default listFactory;\r\n\r\n","//Task Object\r\n\r\n//Task Object Prototype Functions\r\nconst taskProto = {\r\n    editName(newName) {\r\n        this.name = newName;\r\n    },\r\n    editDetails(newDetails) {\r\n        this.details = newDetails;\r\n    },\r\n    editDueDate(newDueDate) {\r\n        this.dueDate = newDueDate;\r\n    },\r\n    editPriority(newPriority) {\r\n        this.priority = newPriority;\r\n    },\r\n    editList(newList) {\r\n        this.list = newList;\r\n    },\r\n    toggleStatus() {\r\n        if (this.completed === false) {\r\n            this.completed = true;\r\n        } else {\r\n            this.completed = false\r\n        }\r\n    },\r\n}\r\n\r\n//Task Factory Function\r\nconst taskFactory = (name,details,dueDate,priority,list,active) => {\r\n\r\n    let task = Object.create(taskProto);\r\n    let completed = false;  \r\n\r\n    task.name = name;\r\n    task.details = details;\r\n    task.dueDate = dueDate;\r\n    task.priority = priority;\r\n    task.list = list;\r\n    task.active = active;\r\n    task.completed = completed;\r\n    task.id = Date.now().toString();\r\n    \r\n    return task;\r\n} \r\n\r\n//Add Task Function (dont think this is need)\r\n// const addTask = (taskList,name,details,dueDate,priority,list) => {\r\n//     taskList.push(taskFactory(name,details,dueDate,priority,list));\r\n// }\r\n\r\nexport default taskFactory;\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}